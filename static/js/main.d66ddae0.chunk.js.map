{"version":3,"sources":["components/STT.component.jsx","App.js","index.js"],"names":["STT","transcript","useSpeechRecognition","useState","script","setScript","useSpeechSynthesis","speak","voice","voices","SpeechRecognition","browserSupportsSpeechRecognition","className","onClick","fetch","then","response","json","puzzle","startListening","stopListening","text","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAkDeA,EA7CH,WAAO,IACPC,EAAeC,iCAAfD,WADM,EAEeE,mBAAS,qBAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGYC,+BAAlBC,EAHM,EAGNA,MAEFC,EALQ,EAGCC,OAEM,GAErB,IAAKC,IAAkBC,mCACnB,OAAO,KASX,OACI,sBAAKC,UAAU,YAAf,UAEI,2DACA,wCACA,wBAAQA,UAAU,qCAAqCC,QAX3C,WAChBC,MAAM,iCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIZ,GAAU,kBAAIY,EAAKC,cAQ7B,kBACA,qBAAKN,UAAU,QAAf,SACI,4BAAIR,MAGR,+CACA,gCACI,wBAAQQ,UAAU,qCAAqCC,QAASH,IAAkBS,eAAlF,mBACA,wBAAQP,UAAU,qCAAqCC,QAASH,IAAkBU,cAAlF,qBAEJ,qBAAKR,UAAU,QAAf,SACI,4BAAIX,MAER,qBACIW,UAAU,qCACVC,QAAS,kBAAMN,EAAM,CAACc,KAAMjB,EAAQI,MAAMA,KAF9C,0DC5BGc,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCFNW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d66ddae0.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport './STT.styles.scss'\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport { useSpeechSynthesis } from 'react-speech-kit';\r\n\r\nconst STT = () => {\r\n    const { transcript } = useSpeechRecognition()\r\n    const [ script, setScript] = useState('This is my script');\r\n    const { speak, voices } = useSpeechSynthesis();\r\n\r\n    const voice = voices[1]\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n    const handleClick = () => {\r\n        fetch('https://puzzle.mead.io/puzzle')\r\n        .then(response => response.json())\r\n        .then(json => setScript(()=>json.puzzle))\r\n        }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <h1>Your English Speech Coach</h1>\r\n            <h2>Script</h2>\r\n            <button className='action-button shadow animate color' onClick={handleClick}>next</button>\r\n            <div className=\"paper\">\r\n                <p>{script}</p>\r\n            </div>\r\n            \r\n            <h2>How You Sound</h2>\r\n            <div>\r\n                <button className='action-button shadow animate color' onClick={SpeechRecognition.startListening}>Start</button>\r\n                <button className='action-button shadow animate color' onClick={SpeechRecognition.stopListening}>Stop</button>\r\n            </div>\r\n            <div className=\"paper\">\r\n                <p>{transcript}</p>\r\n            </div>\r\n            <div \r\n                className='action-button shadow animate color' \r\n                onClick={() => speak({text: script, voice:voice})}>\r\n                Click me to hear native speaker's speech\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default STT","\nimport './App.css';\nimport STT from './components/STT.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <STT/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}